# [Question]: Please find out how widespread the appeal of our top five actors is. What percentage of our customers have rented films featuring these actors?
# [Schema links]: ['ACTOR.actor_id', 'ACTOR.first_name', 'ACTOR.last_name', 'PAYMENT.amount', 'FILM_ACTOR.actor_id', 'FILM_ACTOR.film_id', 'FILM.film_id', 'INVENTORY.film_id', 'INVENTORY.inventory_id', 'RENTAL.inventory_id', 'RENTAL.rental_id', 'PAYMENT.rental_id', 'FILM.title', 'CUSTOMER.customer_id', 'PAYMENT.customer_id']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the top 5 actors by gross sales by joining ACTOR, FILM_ACTOR, FILM, INVENTORY, RENTAL, and PAYMENT tables, grouping by actor details, and ordering by SUM(amount) DESC with LIMIT 5.
2. Create a CTE (ACTORS_SALES) to calculate gross sales per actor.
3. Create a CTE (TOP5) to select the top 5 actors with their concatenated names.
4. Identify all films featuring these top 5 actors by joining TOP5 with FILM_ACTOR and FILM.
5. Create a CTE (TOP_MOVIES) to list distinct film IDs from these films.
6. Identify all customers who have rented any film by joining CUSTOMER, PAYMENT, RENTAL, and INVENTORY to get customer-film rental pairs.
7. Create a CTE (CUSTOMER_RENTALS) to store customer IDs and the film IDs they rented.
8. Create a CTE (CUSTOMER_TOP_MOVIES) to find distinct customers who rented any film in TOP_MOVIES by checking if film_id is in the TOP_MOVIES list.
9. Calculate the percentage by dividing the count of distinct customers in CUSTOMER_TOP_MOVIES by the total count of customers, multiplying by 100.0, and rounding to 2 decimal places.
10. Format the final output to show the calculated percentage as 'answer'.
# [Sql]: WITH      ACTORS_SALES AS (         SELECT              a."actor_id",             a."first_name",             a."last_name",             SUM(p."amount") AS gross_sales         FROM              SQLITE_SAKILA.SQLITE_SAKILA.ACTOR a         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.FILM_ACTOR fa ON fa."actor_id" = a."actor_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.FILM f ON f."film_id" = fa."film_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.INVENTORY i ON i."film_id" = f."film_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.RENTAL r ON r."inventory_id" = i."inventory_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.PAYMENT p ON p."rental_id" = r."rental_id"         GROUP BY              a."actor_id", a."first_name", a."last_name"     ),     TOP5 AS (         SELECT              "actor_id",             CONCAT(a."first_name", ' ', a."last_name") AS full_name,             gross_sales         FROM              ACTORS_SALES a         ORDER BY              gross_sales DESC         LIMIT              5     ),     TOP_MOVIES AS (         SELECT              f."film_id",             f."title"         FROM              TOP5 t5         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.FILM_ACTOR fa ON fa."actor_id" = t5."actor_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.FILM f ON f."film_id" = fa."film_id"         GROUP BY              f."film_id", f."title"   -- Add title to the GROUP BY clause     ),     CUSTOMER_RENTALS AS (         SELECT              c."customer_id",             i."film_id"         FROM              SQLITE_SAKILA.SQLITE_SAKILA.CUSTOMER c         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.PAYMENT p ON p."customer_id" = c."customer_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.RENTAL r ON r."rental_id" = p."rental_id"         JOIN              SQLITE_SAKILA.SQLITE_SAKILA.INVENTORY i ON i."inventory_id" = r."inventory_id"     ),     CUSTOMER_TOP_MOVIES AS (         SELECT DISTINCT              cr."customer_id"         FROM              CUSTOMER_RENTALS cr         WHERE              cr."film_id" IN (                 SELECT                      tm."film_id"                 FROM                      TOP_MOVIES tm             )     ) SELECT      ROUND(         100.0 * (SELECT COUNT("customer_id") FROM CUSTOMER_TOP_MOVIES) /          (SELECT COUNT("customer_id") FROM SQLITE_SAKILA.SQLITE_SAKILA.CUSTOMER), 2     ) AS answer;