# [Question]: Can you list the email addresses of the top 10 users who registered in 2019 and made purchases in 2019, ranking them by their highest average order value, where average order value is calculated by multiplying the number of items in each order by the sale price, summing this total across all orders for each user, and then dividing by the total number of orders?
# [Schema links]: ['USERS.id', 'USERS.email', 'USERS.created_at', 'ORDERS.user_id', 'ORDERS.order_id', 'ORDERS.created_at', 'ORDERS.num_of_item', 'ORDER_ITEMS.user_id', 'ORDER_ITEMS.order_id', 'ORDER_ITEMS.product_id', 'ORDER_ITEMS.sale_price', 'ORDER_ITEMS.created_at']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the relevant tables: `USERS` (for user details and registration date), `ORDERS` (for order details and creation date), and `ORDER_ITEMS` (for sale price and order items).
2. Filter `USERS` to include only those who registered in 2019 by checking `created_at` falls within 2019.
3. Filter `ORDERS` to include only orders created in 2019 by checking `created_at` falls within 2019.
4. Filter `ORDER_ITEMS` to include only items from orders created in 2019 by checking `created_at` falls within 2019.
5. Join `ORDERS` and `ORDER_ITEMS` on `order_id` to combine order-level information (like `num_of_item`) with item-level information (like `sale_price`).
6. Calculate the total sale per order item by multiplying `num_of_item` by `sale_price`.
7. Aggregate the data by `user_id` to compute: total sum of all order item sales (LTV), total count of orders, and then derive average order value as LTV divided by order count.
8. Join the aggregated order data with the filtered `USERS` table on `user_id` to get user email addresses.
9. Order the results by `avg_order_value` in descending order to rank users by highest average order value.
10. Limit the output to the top 10 users.
# [Sql]: WITH   main AS (     SELECT       "id" AS "user_id",       "email",       "gender",       "country",       "traffic_source"     FROM       "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."USERS"     WHERE       TO_TIMESTAMP("created_at" / 1000000.0) BETWEEN TO_TIMESTAMP('2019-01-01') AND TO_TIMESTAMP('2019-12-31')   ),    daate AS (     SELECT       "user_id",       "order_id",       CAST(TO_TIMESTAMP("created_at" / 1000000.0) AS DATE) AS "order_date",       "num_of_item"     FROM       "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."ORDERS"     WHERE       TO_TIMESTAMP("created_at" / 1000000.0) BETWEEN TO_TIMESTAMP('2019-01-01') AND TO_TIMESTAMP('2019-12-31')   ),    orders AS (     SELECT       "user_id",       "order_id",       "product_id",       "sale_price",       "status"     FROM       "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."ORDER_ITEMS"     WHERE       TO_TIMESTAMP("created_at" / 1000000.0) BETWEEN TO_TIMESTAMP('2019-01-01') AND TO_TIMESTAMP('2019-12-31')   ),    nest AS (     SELECT       o."user_id",       o."order_id",       o."product_id",       d."order_date",       d."num_of_item",       ROUND(o."sale_price", 2) AS "sale_price",       ROUND(d."num_of_item" * o."sale_price", 2) AS "total_sale"     FROM       orders o     INNER JOIN       daate d     ON       o."order_id" = d."order_id"     ORDER BY       o."user_id"   ),    type AS (     SELECT       "user_id",       MIN(nest."order_date") AS "cohort_date",       MAX(nest."order_date") AS "latest_shopping_date",       DATEDIFF(MONTH, MIN(nest."order_date"), MAX(nest."order_date")) AS "lifespan_months",       ROUND(SUM("total_sale"), 2) AS "ltv",       COUNT("order_id") AS "no_of_order"     FROM       nest     GROUP BY       "user_id"   ),    kite AS (     SELECT       m."user_id",       m."email",       m."gender",       m."country",       m."traffic_source",       EXTRACT(YEAR FROM n."cohort_date") AS "cohort_year",       n."latest_shopping_date",       n."lifespan_months",       n."ltv",       n."no_of_order",       ROUND(n."ltv" / n."no_of_order", 2) AS "avg_order_value"     FROM       main m     INNER JOIN       type n     ON       m."user_id" = n."user_id"   )  SELECT   "email" FROM   kite ORDER BY   "avg_order_value" DESC LIMIT 10;