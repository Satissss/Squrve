# [Question]: Please provide, for each age from 12 through 18 (inclusive), the total number of deaths and the number of deaths among individuals identified as Black (based on race descriptions containing the word ‘black’), specifically for deaths associated with ICD-10 codes whose descriptions include the word ‘vehicle’ and for deaths associated with ICD-10 codes whose descriptions include the word ‘firearm.’ Use the EntityAxisConditions table to determine which ICD-10 codes were involved in each death, rather than joining ICD-10 code information directly on the death records.
# [Schema links]: ["deathrecords.age", "deathrecords.race", "entityaxisconditions.icd10code", "deathrecords.id", "entityaxisconditions.deathrecordid", "icd10code.code", "icd10code.description", "race.code", "race.description"]
# [Analysis]: Let’s think step by step.
1. Identify the relevant tables and columns: `deathrecords` (age, race, id), `entityaxisconditions` (icd10code, deathrecordid), `icd10code` (code, description), and `race` (code, description).
2. Filter `deathrecords` for ages between 12 and 18 by joining with `entityaxisconditions` on `deathrecordid`.
3. Create a CTE (`filtered_deaths`) containing age, race, and icd10code for deaths within the specified age range.
4. Join `filtered_deaths` with `icd10code` on `icd10code` to access descriptions, then flag rows where description includes 'vehicle' or 'firearm' using `CASE` statements.
5. Create a CTE (`vehicle_firearm_deaths`) storing age, race, ICD10 code, and flags for vehicle/firearm-related deaths.
6. Filter `vehicle_firearm_deaths` to include only rows where race description contains 'black' by joining with `race` table's code and description.
7. Create a CTE (`black_deaths`) aggregating vehicle/firearm deaths for Black individuals grouped by age.
8. Create a CTE (`total_deaths`) aggregating all vehicle/firearm deaths (regardless of race) grouped by age.
9. Join `total_deaths` with `black_deaths` on age to combine total and Black-specific counts.
10. Select the final output with age, total vehicle/firearm deaths, and corresponding Black deaths, ordered by age.
# [Sql]: WITH filtered_deaths AS (     SELECT         dr."Age",         dr."Race",         eac."Icd10Code"     FROM         DEATH.DEATH.DEATHRECORDS dr     JOIN         DEATH.DEATH.ENTITYAXISCONDITIONS eac     ON         dr."Id" = eac."DeathRecordId"     WHERE         dr."Age" BETWEEN 12 AND 18 ), vehicle_firearm_deaths AS (     SELECT         fd."Age",         fd."Race",         fd."Icd10Code",         CASE             WHEN icd."Description" ILIKE '%vehicle%' THEN 1             ELSE 0         END AS is_vehicle,         CASE             WHEN icd."Description" ILIKE '%firearm%' THEN 1             ELSE 0         END AS is_firearm     FROM         filtered_deaths fd     JOIN         DEATH.DEATH.ICD10CODE icd     ON         fd."Icd10Code" = icd."Code" ), black_deaths AS (     SELECT         "Age",         SUM(is_vehicle) AS vehicle_deaths,         SUM(is_firearm) AS firearm_deaths     FROM         vehicle_firearm_deaths     WHERE         "Race" IN (SELECT "Code" FROM DEATH.DEATH.RACE WHERE "Description" ILIKE '%black%')     GROUP BY         "Age" ), total_deaths AS (     SELECT         "Age",         SUM(is_vehicle) AS total_vehicle_deaths,         SUM(is_firearm) AS total_firearm_deaths     FROM         vehicle_firearm_deaths     GROUP BY         "Age" ) SELECT     td."Age",     td.total_vehicle_deaths,     bd.vehicle_deaths AS black_vehicle_deaths,     td.total_firearm_deaths,     bd.firearm_deaths AS black_firearm_deaths FROM     total_deaths td LEFT JOIN     black_deaths bd ON     td."Age" = bd."Age" ORDER BY     td."Age";