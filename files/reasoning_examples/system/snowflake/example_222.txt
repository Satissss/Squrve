# [Question]: What were the maximum and minimum net balance changes for Ethereum Classic addresses on October 14, 2016? Calculate these by summing all transactions where addresses received funds (debits), sent funds (credits), and paid or received gas fees. Only include successful status transactions and exclude internal calls of types. For gas fees, consider both the fees paid by transaction senders and received by miners, calculated as multiplied by the gas price for both miners and senders
# [Schema links]: ['TRACES.to_address', 'TRACES.value', 'TRACES.status', 'TRACES.call_type', 'TRACES.block_timestamp', 'TRACES.from_address', 'TRANSACTIONS.receipt_gas_used', 'TRANSACTIONS.gas_price', 'TRANSACTIONS.block_number', 'TRANSACTIONS.block_timestamp', 'TRANSACTIONS.from_address', 'BLOCKS.number', 'BLOCKS.miner']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the need to calculate net balance changes for Ethereum Classic addresses on October 14, 2016, considering debits (received funds), credits (sent funds), and gas fees.
2. For debits: Select `to_address` as address and `value` as positive value from TRACES table where status is successful (1), call_type is not internal (exclude 'delegatecall', 'callcode', 'staticcall'), and block_timestamp corresponds to 2016-10-14.
3. For credits: Select `from_address` as address and `value` as negative value from TRACES table with the same filters as debits.
4. For gas fees received by miners: Join TRANSACTIONS and BLOCKS tables on block_number, sum gas_used * gas_price for each miner, and select miner as address with positive value.
5. For gas fees paid by senders: Select `from_address` as address and gas_used * gas_price as negative value from TRANSACTIONS table for the specified date.
6. Combine all four components using UNION ALL into a CTE named double_entry_book.
7. Create another CTE named net_changes to sum the values for each address to get the net change.
8. Finally, select the maximum and minimum net_change from the net_changes CTE.
# [Sql]: WITH double_entry_book AS (     -- Debits     SELECT          "to_address" AS "address",          "value" AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRACES     WHERE          "to_address" IS NOT NULL         AND "status" = 1         AND ("call_type" NOT IN ('delegatecall', 'callcode', 'staticcall') OR "call_type" IS NULL)         AND TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14'      UNION ALL          -- Credits     SELECT          "from_address" AS "address",          - "value" AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRACES     WHERE          "from_address" IS NOT NULL         AND "status" = 1         AND ("call_type" NOT IN ('delegatecall', 'callcode', 'staticcall') OR "call_type" IS NULL)         AND TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14'      UNION ALL      -- Transaction Fees Debits     SELECT          "miner" AS "address",          SUM(CAST("receipt_gas_used" AS NUMERIC) * CAST("gas_price" AS NUMERIC)) AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRANSACTIONS AS "transactions"     JOIN          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.BLOCKS AS "blocks"          ON "blocks"."number" = "transactions"."block_number"     WHERE          TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14'     GROUP BY          "blocks"."miner"      UNION ALL          -- Transaction Fees Credits     SELECT          "from_address" AS "address",          -(CAST("receipt_gas_used" AS NUMERIC) * CAST("gas_price" AS NUMERIC)) AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRANSACTIONS     WHERE          TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14' ), net_changes AS (     SELECT          "address",         SUM("value") AS "net_change"     FROM          double_entry_book     GROUP BY          "address" ) SELECT      MAX("net_change") AS "max_net_change",     MIN("net_change") AS "min_net_change" FROM     net_changes;