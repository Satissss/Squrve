# [Question]: Identify the CPC technology areas with the highest exponential moving average of patent filings each year (with a smoothing factor of 0.2), considering only the first CPC code for each patent that has a valid filing date and a non-empty application number, and report the full CPC title along with the best year associated with the highest exponential moving average for each CPC group at level 5.
# [Schema links]: ['PUBLICATIONS.cpc', 'PUBLICATIONS.filing_date', 'PUBLICATIONS.application_number', 'CPC_DEFINITION.symbol', 'CPC_DEFINITION.parents', 'CPC_DEFINITION.titleFull', 'CPC_DEFINITION.level']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Filter the PUBLICATIONS table to include only patents with a non-empty application number and valid filing date (greater than 0).
2. For each application_number, select the maximum cpc and filing_date to handle potential duplicates.
3. Use LATERAL FLATTEN on the cpc array to extract individual CPC codes.
4. Filter for only the first CPC code (where "first" = TRUE) for each patent.
5. Join with CPC_DEFINITION on the CPC code to get the parents array and other metadata.
6. Extract the filing year by dividing filing_date by 10000 and taking the floor.
7. Use LATERAL FLATTEN on the parents array to get all parent CPC groups for each patent.
8. Group by CPC group and filing year to count the number of patents per group per year.
9. Assign a row number per CPC group ordered by filing year ascending to sequence the years.
10. Calculate the exponential moving average (EMA) recursively: for the first year, EMA is cnt * 0.2; for subsequent years, EMA is (cnt * 0.2) + (previous EMA * 0.8).
11. For each CPC group, find the year with the highest EMA (using row_number ordered by EMA descending and filing_year descending as tiebreaker).
12. Join the results with CPC_DEFINITION to get the full title and filter for level 5 CPC groups.
13. Select the titleFull, cleaned CPC group (removing quotes), and the best filing year.
14. Order the final output by titleFull and CPC group ascending.
# [Sql]: WITH patent_cpcs AS (     SELECT         cd."parents",         CAST(FLOOR("filing_date" / 10000) AS INT) AS "filing_year"     FROM (         SELECT             MAX("cpc") AS "cpc", MAX("filing_date") AS "filing_date"         FROM             PATENTS.PATENTS.PUBLICATIONS         WHERE              "application_number" != ''         GROUP BY             "application_number"     ) AS publications     , LATERAL FLATTEN(INPUT => "cpc") AS cpcs     JOIN         PATENTS.PATENTS.CPC_DEFINITION cd ON cd."symbol" = cpcs.value:"code"     WHERE          cpcs.value:"first" = TRUE           AND "filing_date" > 0  ), yearly_counts AS (     SELECT         "cpc_group",         "filing_year",         COUNT(*) AS "cnt"     FROM (         SELECT             cpc_parent.value::STRING AS "cpc_group",             "filing_year"         FROM patent_cpcs,              LATERAL FLATTEN(input => patent_cpcs."parents") AS cpc_parent     )     GROUP BY "cpc_group", "filing_year" ), ordered_counts AS (     SELECT         "cpc_group",         "filing_year",         "cnt",         ROW_NUMBER() OVER (PARTITION BY "cpc_group" ORDER BY "filing_year" ASC) AS rn     FROM yearly_counts ), recursive_ema AS (     -- Anchor member: first year per cpc_group     SELECT         "cpc_group",         "filing_year",         "cnt",         "cnt" * 0.2 + 0 * 0.8 AS "ema",         rn     FROM ordered_counts     WHERE rn = 1      UNION ALL      -- Recursive member: subsequent years     SELECT         oc."cpc_group",         oc."filing_year",         oc."cnt",         oc."cnt" * 0.2 + re."ema" * 0.8 AS "ema",         oc.rn     FROM ordered_counts oc     JOIN recursive_ema re         ON oc."cpc_group" = re."cpc_group"        AND oc.rn = re.rn + 1 ), max_ema AS (     SELECT         "cpc_group",         "filing_year",         "ema"     FROM recursive_ema ), ranked_ema AS (     SELECT         me."cpc_group",         me."filing_year",         me."ema",         ROW_NUMBER() OVER (             PARTITION BY me."cpc_group"              ORDER BY me."ema" DESC, me."filing_year" DESC         ) AS rn_rank     FROM max_ema me ) SELECT      c."titleFull",     REPLACE(r."cpc_group", '"', '') AS "cpc_group",     r."filing_year" AS "best_filing_year" FROM ranked_ema r JOIN "PATENTS"."PATENTS"."CPC_DEFINITION" c      ON r."cpc_group" = c."symbol" WHERE      c."level" = 5     AND r.rn_rank = 1 ORDER BY      c."titleFull",      "cpc_group" ASC;