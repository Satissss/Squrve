# [Question]: Examine user engagement with push notifications within a specified one-hour window on June 1, 2023.
# [Schema links]: ['USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.id', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.app_group_id', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.user_id', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.campaign_id', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.message_variation_id', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.platform', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.ad_tracking_enabled', 'USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW.TIME', 'USERS_MESSAGES_PUSHNOTIFICATION_BOUNCE_VIEW.id', 'USERS_MESSAGES_PUSHNOTIFICATION_BOUNCE_VIEW.TIME', 'USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW.id', 'USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW.TIME', 'USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW.carrier', 'USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW.browser', 'USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW.device_model', 'USERS_MESSAGES_PUSHNOTIFICATION_INFLUENCEDOPEN_VIEW.id', 'USERS_MESSAGES_PUSHNOTIFICATION_INFLUENCEDOPEN_VIEW.TIME']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the relevant tables for push notification events: sends, bounces, opens, and influenced opens, each containing event data with timestamps.
2. Filter each event table to include only records within the specified one-hour window on June 1, 2023 (08:00 to 09:00).
3. Convert the TIME column to a timestamp format in each filtered table for consistent time handling.
4. Create a CTE for each event type (push_send, push_bounce, push_open, push_open_influence) with common columns including event type identification.
5. Include additional columns specific to certain events (e.g., carrier, browser, device_model for opens and influenced opens).
6. Use the push_send CTE as the base table for the final query, as sends are the primary events to analyze engagement.
7. Left join the other event CTEs (bounce, open, influenced open) to the send CTE on matching keys: message_variation_id, user_id, and app_group_id to correlate events.
8. Aggregate the data by grouping on all selected dimensions (app_group_id, campaign_id, user_id, time, etc.) to count distinct events and unique users for each engagement type.
9. Select counts of distinct event IDs and distinct user IDs for each event type to measure overall and unique engagements.
10. Format the final output to include all relevant dimensions and aggregated metrics for user engagement analysis.
# [Sql]: WITH push_send AS (     SELECT         id,         app_group_id,         user_id,         campaign_id,         message_variation_id,         platform,         ad_tracking_enabled,         TO_TIMESTAMP(TIME) AS "TIME",         'Send' AS "EVENT_TYPE"     FROM         BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW     WHERE         TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00' ), push_bounce AS (     SELECT         id,         app_group_id,         user_id,         campaign_id,         message_variation_id,         platform,         ad_tracking_enabled,         TO_TIMESTAMP(TIME) AS "TIME",         'Bounce' AS "EVENT_TYPE"     FROM         BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_BOUNCE_VIEW     WHERE         TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00' ), push_open AS (     SELECT         id,         app_group_id,         user_id,         campaign_id,         message_variation_id,         platform,         ad_tracking_enabled,         TO_TIMESTAMP(TIME) AS "TIME",         'Open' AS "EVENT_TYPE",         carrier,         browser,         device_model     FROM         BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW     WHERE         TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00' ), push_open_influence AS (     SELECT         id,         app_group_id,         user_id,         campaign_id,         message_variation_id,         platform,         TO_TIMESTAMP(TIME) AS "TIME",         'Influenced Open' AS "EVENT_TYPE",         carrier,         browser,         device_model     FROM         BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_INFLUENCEDOPEN_VIEW     WHERE         TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00' ) SELECT     ps.app_group_id,     ps.campaign_id,     ps.user_id,     ps.time,     po.time push_open_time,     ps.message_variation_id,     ps.platform,     ps.ad_tracking_enabled,     po.carrier,     po.browser,     po.device_model,     COUNT(         DISTINCT ps.id     ) push_notification_sends,     COUNT(         DISTINCT ps.user_id     ) unique_push_notification_sends,     COUNT(         DISTINCT pb.id     ) push_notification_bounced,     COUNT(         DISTINCT pb.user_id     ) unique_push_notification_bounced,     COUNT(         DISTINCT po.id     ) push_notification_open,     COUNT(         DISTINCT po.user_id     ) unique_push_notification_opened,     COUNT(         DISTINCT poi.id     ) push_notification_influenced_open,     COUNT(         DISTINCT poi.user_id     ) unique_push_notification_influenced_open FROM     push_send ps     LEFT JOIN push_bounce pb     ON ps.message_variation_id = pb.message_variation_id     AND ps.user_id = pb.user_id     AND ps.app_group_id = pb.app_group_id     LEFT JOIN push_open po     ON ps.message_variation_id = po.message_variation_id     AND ps.user_id = po.user_id     AND ps.app_group_id = po.app_group_id     LEFT JOIN push_open_influence poi     ON ps.message_variation_id = poi.message_variation_id     AND ps.user_id = poi.user_id     AND ps.app_group_id = poi.app_group_id GROUP BY     1,2,3,4,5,6,7,8,9,10,11;