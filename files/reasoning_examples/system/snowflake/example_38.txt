# [Question]: Tell me the maximum and minimum net changes in balances for Ethereum Classic addresses on October 14, 2016, calculated by summing debits (values sent to addresses, excluding internal calls), credits (values sent from addresses, excluding internal calls), and gas fees (total gas used multiplied by the gas price for both miners and senders), while only considering successful transactions
# [Schema links]: ["traces.to_address", "traces.value", "traces.status", "traces.call_type", "traces.block_timestamp", "traces.from_address", "blocks.miner", "transactions.receipt_gas_used", "transactions.gas_price", "transactions.block_number", "transactions.from_address", "transactions.block_timestamp", "blocks.number"]
# [Analysis]: Letâ€™s think step by step.
1. Identify relevant tables: `traces` (for debits/credits and transaction status), `transactions` (for gas fees calculation), and `blocks` (for miner addresses).
2. Filter `traces` entries for successful transactions (`status = 1`), exclude internal calls (`call_type NOT IN ('delegatecall', 'callcode', 'staticcall')`), and transactions on October 14, 2016 (`TO_DATE(TO_TIMESTAMP(block_timestamp / 1000000)) = '2016-10-14'`).
3. Calculate debits as `to_address` receiving `value` from `traces` and credits as `from_address` losing `-value` from `traces`.
4. Calculate gas fees for miners by joining `transactions` with `blocks` to get `miner` addresses, then sum `receipt_gas_used * gas_price` per miner.
5. Calculate gas fees for senders as negative of `receipt_gas_used * gas_price` from `transactions` entries on the target date.
6. Combine all entries (debits, credits, miner fees, sender fees) into a CTE `double_entry_book` using `UNION ALL`.
7. Compute net changes per address by summing all `value` entries in `double_entry_book` and grouping by `address`.
8. Select the maximum and minimum values from the aggregated net changes in the `net_changes` CTE.
# [Sql]: WITH double_entry_book AS (     -- Debits     SELECT          "to_address" AS "address",          "value" AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRACES     WHERE          "to_address" IS NOT NULL         AND "status" = 1         AND ("call_type" NOT IN ('delegatecall', 'callcode', 'staticcall') OR "call_type" IS NULL)         AND TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14'      UNION ALL          -- Credits     SELECT          "from_address" AS "address",          - "value" AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRACES     WHERE          "from_address" IS NOT NULL         AND "status" = 1         AND ("call_type" NOT IN ('delegatecall', 'callcode', 'staticcall') OR "call_type" IS NULL)         AND TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14'      UNION ALL      -- Transaction Fees Debits     SELECT          "miner" AS "address",          SUM(CAST("receipt_gas_used" AS NUMERIC) * CAST("gas_price" AS NUMERIC)) AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRANSACTIONS AS "transactions"     JOIN          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.BLOCKS AS "blocks"          ON "blocks"."number" = "transactions"."block_number"     WHERE          TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14'     GROUP BY          "blocks"."miner"      UNION ALL          -- Transaction Fees Credits     SELECT          "from_address" AS "address",          -(CAST("receipt_gas_used" AS NUMERIC) * CAST("gas_price" AS NUMERIC)) AS "value"     FROM          CRYPTO.CRYPTO_ETHEREUM_CLASSIC.TRANSACTIONS     WHERE          TO_DATE(TO_TIMESTAMP("block_timestamp" / 1000000)) = '2016-10-14' ), net_changes AS (     SELECT          "address",         SUM("value") AS "net_change"     FROM          double_entry_book     GROUP BY          "address" ) SELECT      MAX("net_change") AS "max_net_change",     MIN("net_change") AS "min_net_change" FROM     net_changes;