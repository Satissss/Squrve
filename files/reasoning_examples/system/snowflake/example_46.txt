# [Question]: Please generate a report that, for each month in 2021, provides the number of orders, the number of unique purchasers, and the profit (calculated as the sum of product retail prices minus the sum of product costs), where the orders were placed during 2021 by users who registered in 2021 for inventory items created in 2021, and group the results by the users' country, product department, and product category.
# [Schema links]: ["THELOOK_ECOMMERCE.ORDERS.order_id", "THELOOK_ECOMMERCE.ORDER_ITEMS.order_id", "THELOOK_ECOMMERCE.ORDER_ITEMS.inventory_item_id", "THELOOK_ECOMMERCE.ORDER_ITEMS.sale_price", "THELOOK_ECOMMERCE.ORDERS.created_at", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.product_category", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.product_department", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.product_retail_price", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.product_distribution_center_id", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.cost", "THELOOK_ECOMMERCE.DISTRIBUTION_CENTERS.name", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.id", "THELOOK_ECOMMERCE.DISTRIBUTION_CENTERS.id", "THELOOK_ECOMMERCE.INVENTORY_ITEMS.created_at", "THELOOK_ECOMMERCE.USERS.country", "THELOOK_ECOMMERCE.USERS.id", "THELOOK_ECOMMERCE.ORDERS.user_id", "THELOOK_ECOMMERCE.USERS.created_at"]
# [Analysis]: Letâ€™s think step by step.
1. Identify required tables and columns: ORDERS (order_id, created_at, user_id), ORDER_ITEMS (inventory_item_id, sale_price), INVENTORY_ITEMS (product_category, product_department, product_retail_price, cost, created_at), USERS (country, created_at), and DISTRIBUTION_CENTERS (name).
2. Join ORDERS and ORDER_ITEMS on order_id to link orders with their items, filtering orders placed in 2021 using created_at timestamp conversion.
3. Join the result with INVENTORY_ITEMS to access product details, filtering inventory items created in 2021 via their created_at timestamp.
4. Join with USERS to include user registration data, filtering users who registered in 2021 via their created_at timestamp.
5. Calculate reporting_month by truncating the order's created_at timestamp to the nearest month.
6. Group results by reporting_month, country, product_department, and product_category.
7. Compute aggregated values: COUNT(DISTINCT order_id) for orders, COUNT(DISTINCT user_id) for unique purchasers, and SUM(product_retail_price - cost) for profit.
8. Structure the final query using CTEs to handle progressive joins and filters before the final aggregation and selection.
# [Sql]: WITH orders_x_order_items AS (   SELECT orders.*,          order_items."inventory_item_id",          order_items."sale_price"   FROM "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."ORDERS" AS orders   LEFT JOIN "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."ORDER_ITEMS" AS order_items   ON orders."order_id" = order_items."order_id"   WHERE TO_TIMESTAMP_NTZ(orders."created_at" / 1000000) BETWEEN TO_TIMESTAMP_NTZ('2021-01-01') AND TO_TIMESTAMP_NTZ('2021-12-31') ),  orders_x_inventory AS (   SELECT orders_x_order_items.*,          inventory_items."product_category",          inventory_items."product_department",          inventory_items."product_retail_price",          inventory_items."product_distribution_center_id",          inventory_items."cost",          distribution_centers."name"   FROM orders_x_order_items   LEFT JOIN "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."INVENTORY_ITEMS" AS inventory_items   ON orders_x_order_items."inventory_item_id" = inventory_items."id"   LEFT JOIN "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."DISTRIBUTION_CENTERS" AS distribution_centers   ON inventory_items."product_distribution_center_id" = distribution_centers."id"   WHERE TO_TIMESTAMP_NTZ(inventory_items."created_at" / 1000000) BETWEEN TO_TIMESTAMP_NTZ('2021-01-01') AND TO_TIMESTAMP_NTZ('2021-12-31') ),  orders_x_users AS (   SELECT orders_x_inventory.*,          users."country" AS "users_country"   FROM orders_x_inventory   LEFT JOIN "THELOOK_ECOMMERCE"."THELOOK_ECOMMERCE"."USERS" AS users   ON orders_x_inventory."user_id" = users."id"   WHERE TO_TIMESTAMP_NTZ(users."created_at" / 1000000) BETWEEN TO_TIMESTAMP_NTZ('2021-01-01') AND TO_TIMESTAMP_NTZ('2021-12-31') )  SELECT    DATE_TRUNC('MONTH', TO_DATE(TO_TIMESTAMP_NTZ(orders_x_users."created_at" / 1000000))) AS "reporting_month",   orders_x_users."users_country",   orders_x_users."product_department",   orders_x_users."product_category",   COUNT(DISTINCT orders_x_users."order_id") AS "n_order",   COUNT(DISTINCT orders_x_users."user_id") AS "n_purchasers",   SUM(orders_x_users."product_retail_price") - SUM(orders_x_users."cost") AS "profit" FROM orders_x_users GROUP BY 1, 2, 3, 4 ORDER BY "reporting_month";