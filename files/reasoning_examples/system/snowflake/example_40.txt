# [Question]: Calculate the average balance (in quadrillions, 10^15) of the top 10 Ethereum addresses by net balance, including incoming and outgoing transfers from traces (only successful transactions and excluding call types like delegatecall, callcode, and staticcall), miner rewards (sum of gas fees per block), and sender gas fee deductions. Exclude null addresses and round the result to two decimal places.
# [Schema links]: ["ETHEREUM_BLOCKCHAIN.TRACES.to_address", "ETHEREUM_BLOCKCHAIN.TRACES.value", "ETHEREUM_BLOCKCHAIN.TRACES.status", "ETHEREUM_BLOCKCHAIN.TRACES.call_type", "ETHEREUM_BLOCKCHAIN.TRACES.from_address", "ETHEREUM_BLOCKCHAIN.TRANSACTIONS.receipt_gas_used", "ETHEREUM_BLOCKCHAIN.TRANSACTIONS.gas_price", "ETHEREUM_BLOCKCHAIN.TRANSACTIONS.block_number", "ETHEREUM_BLOCKCHAIN.BLOCKS.miner", "ETHEREUM_BLOCKCHAIN.BLOCKS.number", "ETHEREUM_BLOCKCHAIN.TRANSACTIONS.from_address", "ETHEREUM_BLOCKCHAIN.TRANSACTIONS.status", "ETHEREUM_BLOCKCHAIN.TRANSACTIONS.call_type"]
# [Analysis]: Letâ€™s think step by step.
1. Identify the relevant tables and columns: `TRACES` (to_address, value, status, call_type, from_address), `TRANSACTIONS` (receipt_gas_used, gas_price, block_number, from_address, status, call_type), and `BLOCKS` (miner, number).
2. Create a Common Table Expression (CTE) `double_entry_book` to track all value movements: debits (to_address gains), credits (from_address loses), miner rewards (gas fees), and sender gas fee deductions.
3. For debits, select `to_address` and `value` from `TRACES` where `status = 1`, `call_type` not in excluded types, and `to_address` is not null.
4. For credits, select `from_address` and `-value` from `TRACES` with same filters as debits.
5. For miner rewards, calculate gas fees (receipt_gas_used * gas_price) per block, sum by `miner` from joined `TRANSACTIONS` and `BLOCKS`.
6. For sender gas deductions, select `from_address` and negative gas fees (-(receipt_gas_used * gas_price)) from `TRANSACTIONS`.
7. Combine all four value streams using `UNION ALL` in the `double_entry_book` CTE.
8. Calculate net balance per address by summing all `value` entries in `double_entry_book`, grouped by `address`.
9. Rank addresses by balance descending, limit to top 10 in `top_10_balances` CTE.
10. Compute average of top 10 balances, convert to quadrillions (divide by 1e15), round to two decimal places.
# [Sql]: WITH double_entry_book AS (   -- Debits   SELECT      "to_address" AS "address",     "value" AS "value"   FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TRACES"   WHERE "to_address" IS NOT NULL     AND "status" = 1     AND ("call_type" NOT IN ('delegatecall', 'callcode', 'staticcall') OR "call_type" IS NULL)      UNION ALL      -- Credits   SELECT      "from_address" AS "address",     - "value" AS "value"   FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TRACES"   WHERE "from_address" IS NOT NULL     AND "status" = 1     AND ("call_type" NOT IN ('delegatecall', 'callcode', 'staticcall') OR "call_type" IS NULL)      UNION ALL      -- Transaction fees debits   SELECT      "miner" AS "address",     SUM(CAST("receipt_gas_used" AS NUMBER) * CAST("gas_price" AS NUMBER)) AS "value"   FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TRANSACTIONS" AS "transactions"   JOIN "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."BLOCKS" AS "blocks"     ON "blocks"."number" = "transactions"."block_number"   GROUP BY "blocks"."miner"      UNION ALL      -- Transaction fees credits   SELECT      "from_address" AS "address",     -(CAST("receipt_gas_used" AS NUMBER) * CAST("gas_price" AS NUMBER)) AS "value"   FROM "ETHEREUM_BLOCKCHAIN"."ETHEREUM_BLOCKCHAIN"."TRANSACTIONS" ), top_10_balances AS (   SELECT     "address",     SUM("value") AS "balance"   FROM double_entry_book   GROUP BY "address"   ORDER BY "balance" DESC   LIMIT 10 ) SELECT      ROUND(AVG("balance") / 1e15, 2) AS "average_balance_trillion" FROM top_10_balances;