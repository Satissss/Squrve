# [Question]: Identify the pair of Kaggle users involved in ForumMessageVotes such that one user has given the other the greatest distinct number of upvotes, then also display how many upvotes that recipient returned. Present the usernames of both users, the total distinct upvotes one received from the other, and the upvotes they gave back, sorting by the highest received count and then by the highest given count, and show only the top result.
# [Schema links]: ['FORUMMESSAGEVOTES.Id', 'FORUMMESSAGEVOTES.FromUserId', 'FORUMMESSAGEVOTES.ToUserId', 'USERS.Id', 'USERS.UserName']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the need to count distinct upvotes between pairs of users, requiring joins between `FORUMMESSAGEVOTES` and `USERS` (twice) to get usernames for both sender and receiver.
2. Create a CTE (`UserPairUpvotes`) to group by `ToUserName` and `FromUserName`, counting distinct `Id` from `FORUMMESSAGEVOTES` to get the number of upvotes for each pair.
3. In `UserPairUpvotes`, join `FORUMMESSAGEVOTES` with `USERS` as `FromUsers` on `FromUserId` to get the sender's username, and with `USERS` as `ToUsers` on `ToUserId` to get the receiver's username.
4. Create another CTE (`TopPairs`) to rank the pairs by `UpvoteCount` in descending order using `ROW_NUMBER()`, and filter to the top rank (highest distinct upvotes) later.
5. To find reciprocal upvotes (how many the recipient gave back), left join `UserPairUpvotes` on the reversed pair (where original receiver becomes sender and original sender becomes receiver) in a new CTE (`ReciprocalUpvotes`).
6. In `ReciprocalUpvotes`, select the top pair (where `Rank = 1`) and use `COALESCE` to handle cases where no reciprocal votes exist (default to 0).
7. Finally, select the usernames, upvotes received, and reciprocal upvotes given, ordering by `UpvotesReceived` DESC and `UpvotesGiven` DESC to show the top result.
# [Sql]: WITH UserPairUpvotes AS (   SELECT     ToUsers."UserName" AS "ToUserName",     FromUsers."UserName" AS "FromUserName",     COUNT(DISTINCT "ForumMessageVotes"."Id") AS "UpvoteCount"   FROM META_KAGGLE.META_KAGGLE.FORUMMESSAGEVOTES AS "ForumMessageVotes"   INNER JOIN META_KAGGLE.META_KAGGLE.USERS AS FromUsers     ON FromUsers."Id" = "ForumMessageVotes"."FromUserId"   INNER JOIN META_KAGGLE.META_KAGGLE.USERS AS ToUsers     ON ToUsers."Id" = "ForumMessageVotes"."ToUserId"   GROUP BY     ToUsers."UserName",     FromUsers."UserName" ), TopPairs AS (   SELECT     "ToUserName",     "FromUserName",     "UpvoteCount",     ROW_NUMBER() OVER (ORDER BY "UpvoteCount" DESC) AS "Rank"   FROM UserPairUpvotes ), ReciprocalUpvotes AS (   SELECT     t."ToUserName",     t."FromUserName",     t."UpvoteCount" AS "UpvotesReceived",     COALESCE(u."UpvoteCount", 0) AS "UpvotesGiven"   FROM TopPairs t   LEFT JOIN UserPairUpvotes u     ON t."ToUserName" = u."FromUserName" AND t."FromUserName" = u."ToUserName"   WHERE t."Rank" = 1 ) SELECT   "ToUserName" AS "UpvotedUserName",   "FromUserName" AS "UpvotingUserName",   "UpvotesReceived" AS "UpvotesReceivedByUpvotedUser",   "UpvotesGiven" AS "UpvotesGivenByUpvotedUser" FROM ReciprocalUpvotes ORDER BY "UpvotesReceived" DESC, "UpvotesGiven" DESC;