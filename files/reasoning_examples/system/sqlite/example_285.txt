# [Question]: According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments
# [Schema links]: ['ORDERS.customer_id', 'ORDERS.order_purchase_timestamp', 'ORDERS.order_status', 'CUSTOMERS.customer_unique_id', 'ORDERS.order_id', 'ORDER_ITEMS.price']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the required tables and columns: `ORDERS` (customer_id, order_purchase_timestamp, order_status, order_id), `CUSTOMERS` (customer_unique_id, customer_id), and `ORDER_ITEMS` (price, order_id).
2. Filter orders to include only 'delivered' status using `WHERE "order_status" = 'delivered'`.
3. Calculate Recency: For each customer, find the maximum order_purchase_timestamp (latest purchase) and assign an NTILE(5) score in descending order (most recent gets highest score).
4. Calculate Frequency: For each customer, count the number of orders (order_id) and assign an NTILE(5) score in descending order (most orders gets highest score).
5. Calculate Monetary: For each customer, sum the price (total spent) and assign an NTILE(5) score in descending order (highest spend gets highest score).
6. Create CTEs for RecencyScore, FrequencyScore, and MonetaryScore by joining necessary tables and grouping by customer_unique_id.
7. Combine the three scores into an RFM CTE by joining on customer_unique_id.
8. Classify RFM segments using a CASE statement based on the combination of recency, frequency, and monetary scores (with frequency and monetary summed).
9. Compute average sales per order for each RFM segment: Divide total_spent by total_orders for each customer, then average this value per segment.
10. Group the results by RFM_Bucket to get the average sales per order for each segment.
# [Sql]: WITH RecencyScore AS (     SELECT "customer_unique_id",            MAX("order_purchase_timestamp") AS "last_purchase",            NTILE(5) OVER (ORDER BY MAX("order_purchase_timestamp") DESC) AS "recency"     FROM E_COMMERCE.E_COMMERCE.ORDERS         JOIN E_COMMERCE.E_COMMERCE.CUSTOMERS USING ("customer_id")     WHERE "order_status" = 'delivered'     GROUP BY "customer_unique_id" ), FrequencyScore AS (     SELECT "customer_unique_id",            COUNT("order_id") AS "total_orders",            NTILE(5) OVER (ORDER BY COUNT("order_id") DESC) AS "frequency"     FROM E_COMMERCE.E_COMMERCE.ORDERS         JOIN E_COMMERCE.E_COMMERCE.CUSTOMERS USING ("customer_id")     WHERE "order_status" = 'delivered'     GROUP BY "customer_unique_id" ), MonetaryScore AS (     SELECT "customer_unique_id",            SUM("price") AS "total_spent",            NTILE(5) OVER (ORDER BY SUM("price") DESC) AS "monetary"     FROM E_COMMERCE.E_COMMERCE.ORDERS         JOIN E_COMMERCE.E_COMMERCE.ORDER_ITEMS USING ("order_id")         JOIN E_COMMERCE.E_COMMERCE.CUSTOMERS USING ("customer_id")     WHERE "order_status" = 'delivered'     GROUP BY "customer_unique_id" ),  RFM AS (     SELECT "last_purchase", "total_orders", "total_spent",         CASE             WHEN "recency" = 1 AND "frequency" + "monetary" IN (1, 2, 3, 4) THEN 'Champions'             WHEN "recency" IN (4, 5) AND "frequency" + "monetary" IN (1, 2) THEN 'Can\'t Lose Them'             WHEN "recency" IN (4, 5) AND "frequency" + "monetary" IN (3, 4, 5, 6) THEN 'Hibernating'             WHEN "recency" IN (4, 5) AND "frequency" + "monetary" IN (7, 8, 9, 10) THEN 'Lost'             WHEN "recency" IN (2, 3) AND "frequency" + "monetary" IN (1, 2, 3, 4) THEN 'Loyal Customers'             WHEN "recency" = 3 AND "frequency" + "monetary" IN (5, 6) THEN 'Needs Attention'             WHEN "recency" = 1 AND "frequency" + "monetary" IN (7, 8) THEN 'Recent Users'             WHEN "recency" = 1 AND "frequency" + "monetary" IN (5, 6) OR                  "recency" = 2 AND "frequency" + "monetary" IN (5, 6, 7, 8) THEN 'Potentital Loyalists'             WHEN "recency" = 1 AND "frequency" + "monetary" IN (9, 10) THEN 'Price Sensitive'             WHEN "recency" = 2 AND "frequency" + "monetary" IN (9, 10) THEN 'Promising'             WHEN "recency" = 3 AND "frequency" + "monetary" IN (7, 8, 9, 10) THEN 'About to Sleep'         END AS "RFM_Bucket"     FROM RecencyScore         JOIN FrequencyScore USING ("customer_unique_id")         JOIN MonetaryScore USING ("customer_unique_id") )  SELECT "RFM_Bucket",         AVG("total_spent" / "total_orders") AS "avg_sales_per_customer" FROM RFM GROUP BY "RFM_Bucket"