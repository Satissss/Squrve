# [Question]: Retrieve the names of players who scored no less than 100 runs in a match while playing for the team that lost that match.
# [Schema links]: ['BALL_BY_BALL.striker', 'BALL_BY_BALL.match_id', 'BATSMAN_SCORED.runs_scored', 'BATSMAN_SCORED.match_id', 'BATSMAN_SCORED.over_id', 'BATSMAN_SCORED.ball_id', 'BATSMAN_SCORED.innings_no', 'MATCH.match_id', 'MATCH.match_winner', 'MATCH.team_1', 'MATCH.team_2', 'PLAYER_MATCH.player_id', 'PLAYER_MATCH.match_id', 'PLAYER_MATCH.team_id', 'PLAYER.player_id', 'PLAYER.player_name']
# [Analysis]: # Output: Letâ€™s think step by step.
1. Identify the need to calculate the total runs scored by each player in each match from the BALL_BY_BALL and BATSMAN_SCORED tables, joining on match_id, over_id, ball_id, and innings_no.
2. Aggregate the runs_scored for each player (striker) and match, filtering for players with a sum of runs_scored >= 100.
3. Create a CTE (PLAYER_RUNS) to store these results.
4. Determine the losing team for each match from the MATCH table by comparing match_winner with team_1 and team_2; the non-winning team is the loser.
5. Create a CTE (LOSING_TEAMS) to store the match_id and the corresponding losing team.
6. Join PLAYER_RUNS with LOSING_TEAMS on match_id to find matches where the player scored >=100 runs and the team lost.
7. Further join with PLAYER_MATCH to verify that the player was actually playing for the losing team in that match (matching on player_id, match_id, and team_id).
8. Create a CTE (PLAYERS_IN_LOSING_TEAMS) to store the qualifying player_id and match_id pairs.
9. Finally, join PLAYERS_IN_LOSING_TEAMS with the PLAYER table on player_id to retrieve the distinct player names.
10. Order the final result by player_name for sorted output.
# [Sql]: -- Step 1: Calculate players' total runs in each match WITH PLAYER_RUNS AS (     SELECT          BBB."striker" AS "player_id",          BBB."match_id",          SUM(CAST(BSC."runs_scored" AS DOUBLE)) AS "total_runs"     FROM          IPL.IPL.BALL_BY_BALL AS BBB     JOIN          IPL.IPL.BATSMAN_SCORED AS BSC     ON          BBB."match_id" = BSC."match_id"          AND BBB."over_id" = BSC."over_id"          AND BBB."ball_id" = BSC."ball_id"          AND BBB."innings_no" = BSC."innings_no"     GROUP BY          BBB."striker", BBB."match_id"     HAVING          SUM(CAST(BSC."runs_scored" AS DOUBLE)) >= 100 ),  -- Step 2: Identify losing teams for each match LOSING_TEAMS AS (     SELECT          "match_id",          CASE              WHEN "match_winner" = "team_1" THEN "team_2"             ELSE "team_1"          END AS "loser"      FROM          IPL.IPL.MATCH ),  -- Step 3: Combine the above results to get players who scored 100 or more runs in losing teams PLAYERS_IN_LOSING_TEAMS AS (     SELECT          PR."player_id",          PR."match_id"      FROM          PLAYER_RUNS AS PR     JOIN          LOSING_TEAMS AS LT     ON          PR."match_id" = LT."match_id"     JOIN          IPL.IPL.PLAYER_MATCH AS PM     ON          PR."player_id" = PM."player_id"          AND PR."match_id" = PM."match_id"          AND LT."loser" = PM."team_id" )  -- Step 4: Select distinct player names from the player table SELECT DISTINCT      P."player_name"  FROM      IPL.IPL.PLAYER AS P JOIN      PLAYERS_IN_LOSING_TEAMS AS PLT ON      P."player_id" = PLT."player_id" ORDER BY      P."player_name";