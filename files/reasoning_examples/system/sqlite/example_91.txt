# [Question]: According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments
# [Schema links]: [customers.customer_unique_id, orders.order_purchase_timestamp, orders.order_status, orders.customer_id, customers.customer_id, orders.order_id, order_items.price, order_items.order_id]
# [Analysis]: Letâ€™s think step by step.
1. Identify relevant tables and columns: `customers.customer_unique_id`, `orders.order_purchase_timestamp`, `orders.order_status`, `orders.order_id`, `order_items.price`, and relationships between them via `customer_id` and `order_id`.
2. Filter orders to only include those with `order_status = 'delivered'` to consider only delivered orders.
3. Calculate Recency by determining the latest `order_purchase_timestamp` for each customer and assign quintiles using `NTILE(5)` ordered by descending dates.
4. Calculate Frequency by counting the total delivered orders per customer and assign quintiles using `NTILE(5)` ordered by descending counts.
5. Calculate Monetary value by summing `price` from `order_items` for each customer and assign quintiles using `NTILE(5)` ordered by descending totals.
6. Join the Recency, Frequency, and Monetary scores on `customer_unique_id` to create a combined RFM dataset.
7. Define RFM segments using a `CASE` statement that categorizes customers based on combinations of their recency, frequency, and monetary scores.
8. Compute average sales per order for each segment by dividing total spend (`total_spent`) by total orders (`total_orders`).
9. Group the results by the defined RFM segments and calculate the average sales per order for each group.
# [Sql]: WITH RecencyScore AS (     SELECT customer_unique_id,            MAX(order_purchase_timestamp) AS last_purchase,            NTILE(5) OVER (ORDER BY MAX(order_purchase_timestamp) DESC) AS recency     FROM orders         JOIN customers USING (customer_id)     WHERE order_status = 'delivered'     GROUP BY customer_unique_id ), FrequencyScore AS (     SELECT customer_unique_id,            COUNT(order_id) AS total_orders,            NTILE(5) OVER (ORDER BY COUNT(order_id) DESC) AS frequency     FROM orders         JOIN customers USING (customer_id)     WHERE order_status = 'delivered'     GROUP BY customer_unique_id ), MonetaryScore AS (     SELECT customer_unique_id,            SUM(price) AS total_spent,            NTILE(5) OVER (ORDER BY SUM(price) DESC) AS monetary     FROM orders         JOIN order_items USING (order_id)         JOIN customers USING (customer_id)     WHERE order_status = 'delivered'     GROUP BY customer_unique_id ),  -- 2. Assign each customer to a group RFM AS (     SELECT last_purchase, total_orders, total_spent,         CASE             WHEN recency = 1 AND frequency + monetary IN (1, 2, 3, 4) THEN "Champions"             WHEN recency IN (4, 5) AND frequency + monetary IN (1, 2) THEN "Can't Lose Them"             WHEN recency IN (4, 5) AND frequency + monetary IN (3, 4, 5, 6) THEN "Hibernating"             WHEN recency IN (4, 5) AND frequency + monetary IN (7, 8, 9, 10) THEN "Lost"             WHEN recency IN (2, 3) AND frequency + monetary IN (1, 2, 3, 4) THEN "Loyal Customers"             WHEN recency = 3 AND frequency + monetary IN (5, 6) THEN "Needs Attention"             WHEN recency = 1 AND frequency + monetary IN (7, 8) THEN "Recent Users"             WHEN recency = 1 AND frequency + monetary IN (5, 6) OR                 recency = 2 AND frequency + monetary IN (5, 6, 7, 8) THEN "Potentital Loyalists"             WHEN recency = 1 AND frequency + monetary IN (9, 10) THEN "Price Sensitive"             WHEN recency = 2 AND frequency + monetary IN (9, 10) THEN "Promising"             WHEN recency = 3 AND frequency + monetary IN (7, 8, 9, 10) THEN "About to Sleep"         END AS RFM_Bucket     FROM RecencyScore         JOIN FrequencyScore USING (customer_unique_id)         JOIN MonetaryScore USING (customer_unique_id) )  SELECT RFM_Bucket,         AVG(total_spent / total_orders) AS avg_sales_per_customer FROM RFM GROUP BY RFM_Bucket