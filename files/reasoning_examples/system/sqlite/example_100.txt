# [Question]: Calculate the total income from Meat Lovers pizzas priced at $12 and Vegetarian pizzas at $10. Include any extra toppings charged at $1 each. Ensure that canceled orders are filtered out. How much money has Pizza Runner earned in total?
# [Schema links]: [pizza_clean_customer_orders.order_id, pizza_clean_customer_orders.pizza_id, pizza_clean_customer_orders.extras, pizza_clean_runner_orders.order_id, pizza_clean_runner_orders.cancellation]
# [Analysis]: Letâ€™s think step by step.
1. Identify the relevant tables: `pizza_clean_customer_orders` (order_id, pizza_id, extras) and `pizza_clean_runner_orders` (order_id, cancellation).
2. Filter out canceled orders by joining the tables on `order_id` and adding a `WHERE cancellation IS NULL` condition.
3. Calculate the base price for each pizza using a `CASE` statement: $12 for pizza_id 1 and $10 for pizza_id 2.
4. Split the `extras` string into individual values using a recursive CTE to count the number of extra toppings per order.
5. Join the split extras count with the main dataset to include the total extras per order.
6. Sum the base prices and add the total extras (each worth $1) for each order and pizza combination.
7. Use a CTE to structure intermediate calculations and aggregate the final total income by summing all values.
# [Sql]: WITH get_extras_count AS (     WITH RECURSIVE split_extras AS (         SELECT             order_id,             TRIM(SUBSTR(extras, 1, INSTR(extras || ',', ',') - 1)) AS each_extra,             SUBSTR(extras || ',', INSTR(extras || ',', ',') + 1) AS remaining_extras         FROM             pizza_clean_customer_orders         UNION ALL         SELECT             order_id,             TRIM(SUBSTR(remaining_extras, 1, INSTR(remaining_extras, ',') - 1)) AS each_extra,             SUBSTR(remaining_extras, INSTR(remaining_extras, ',') + 1)         FROM             split_extras         WHERE             remaining_extras <> ''     )     SELECT         order_id,         COUNT(each_extra) AS total_extras     FROM         split_extras     GROUP BY         order_id ), calculate_totals AS (     SELECT         t1.order_id,         t1.pizza_id,         SUM(             CASE                 WHEN pizza_id = 1 THEN 12                 WHEN pizza_id = 2 THEN 10             END         ) AS total_price,         COALESCE(t3.total_extras, 0) AS total_extras     FROM         pizza_clean_customer_orders AS t1     JOIN         pizza_clean_runner_orders AS t2     ON         t2.order_id = t1.order_id     LEFT JOIN         get_extras_count AS t3     ON         t3.order_id = t1.order_id     WHERE         t2.cancellation IS NULL     GROUP BY         t1.order_id,         t1.pizza_id ) SELECT     SUM(total_price) + SUM(total_extras) AS total_income FROM     calculate_totals;