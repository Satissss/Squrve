# [Question]: Which quickplay event type had the lowest user retention rate during the second week after their initial engagement, for users who first engaged between August 1 and August 15, 2018, as measured by the presence of session_start events??
# [Schema links]: ["events_.user_pseudo_id", "events_.event_name", "events_.event_date"]
# [Analysis]: Letâ€™s think step by step.
1. Identify the relevant columns: `user_pseudo_id`, `event_name`, and `event_date` from the `events_` table.
2. Define the initial engagement date range (August 1-15, 2018) using a CTE named `dates`.
3. Create a CTE (`dates_active_table`) to track user active dates based on `session_start` events within the specified date range.
4. Build a CTE (`event_table`) to capture each user's first occurrence of quickplay event types and their cohort date.
5. Calculate days since initial engagement using a CTE (`days_since_event_table`) by joining event and active dates.
6. Categorize days into weeks since event using a CTE (`weeks_retention`) with `CEIL(days_since_event / 7)` for week calculation.
7. Aggregate weekly retention data in `aggregated_weekly_retention_table` by counting active days and retained users per cohort and week.
8. Compute retention rates in `RETENTION_INFO` by dividing retained users by the maximum retained users (initial cohort size) for each event type.
9. Filter results to focus on the second week (`weeks_since_event = 2`), sort by retention rate ascending, and select the top result.
# [Sql]: -- Define the date range and calculate the minimum date for filtering results WITH dates AS (     SELECT          DATE('2018-08-01') AS start_date,         DATE('2018-08-15') AS end_date ), -- Create a table of active dates for each user within the specified date range dates_active_table AS (     SELECT         user_pseudo_id,         PARSE_DATE('%Y%m%d', `event_date`) AS user_active_date     FROM          `firebase-public-project.analytics_153293282.events_*`      WHERE          event_name = 'session_start'         AND PARSE_DATE('%Y%m%d', `event_date`) BETWEEN (SELECT start_date FROM dates) AND (SELECT end_date FROM dates)     GROUP BY          user_pseudo_id, user_active_date ), -- Create a table of the earliest quickplay event date for each user within the specified date range event_table AS (     SELECT          user_pseudo_id,         event_name,         MIN(PARSE_DATE('%Y%m%d', `event_date`)) AS event_cohort_date     FROM          `firebase-public-project.analytics_153293282.events_*`      WHERE          event_name IN ('level_start_quickplay', 'level_end_quickplay', 'level_complete_quickplay',                         'level_fail_quickplay', 'level_reset_quickplay', 'level_retry_quickplay')         AND PARSE_DATE('%Y%m%d', `event_date`) BETWEEN (SELECT start_date FROM dates) AND (SELECT end_date FROM dates)     GROUP BY          user_pseudo_id, event_name ), -- Calculate the number of days since each user's initial quickplay event days_since_event_table AS (     SELECT         events.user_pseudo_id,         events.event_name AS event_cohort,         events.event_cohort_date,         days.user_active_date,         DATE_DIFF(days.user_active_date, events.event_cohort_date, DAY) AS days_since_event     FROM          event_table events     LEFT JOIN          dates_active_table days ON events.user_pseudo_id = days.user_pseudo_id     WHERE          events.event_cohort_date <= days.user_active_date ), -- Calculate the weeks since each user's initial quickplay event and count the active days in each week weeks_retention AS (     SELECT         event_cohort,         user_pseudo_id,         CAST(CASE WHEN days_since_event = 0 THEN 0 ELSE CEIL(days_since_event / 7) END AS INTEGER) AS weeks_since_event,         COUNT(DISTINCT days_since_event) AS days_active_since_event -- Count Days Active in Week     FROM          days_since_event_table     GROUP BY          event_cohort, user_pseudo_id, weeks_since_event ), -- Aggregate the weekly retention data aggregated_weekly_retention_table AS (     SELECT         event_cohort,         weeks_since_event,         SUM(days_active_since_event) AS weekly_days_active,         COUNT(DISTINCT user_pseudo_id) AS retained_users     FROM          weeks_retention     GROUP BY          event_cohort, weeks_since_event ), RETENTION_INFO AS ( -- Select and calculate the weekly retention rate for each event cohort SELECT     event_cohort,     weeks_since_event,     weekly_days_active,     retained_users,     (retained_users / MAX(retained_users) OVER (PARTITION BY event_cohort)) AS retention_rate FROM      aggregated_weekly_retention_table ORDER BY      event_cohort, weeks_since_event )  SELECT event_cohort FROM RETENTION_INFO WHERE weeks_since_event = 2 ORDER BY retention_rate LIMIT 1