# [Question]: What is the retention rate for users two weeks after their initial quickplay event, calculated separately for each quickplay event type, within the period from July 2, 2018, to July 16, 2018? Please focus on users who started a session (session_start) during this period.
# [Schema links]: ["analytics_153293282.user_pseudo_id", "analytics_153293282.event_name", "analytics_153293282.event_date"]
# [Analysis]: Letâ€™s think step by step.
1. Define the date range parameters (start_date: 2018-07-02, end_date: 2018-07-16) using a CTE named `dates`.
2. Create `dates_active_table` to track user session_start dates within the specified period by parsing event_date as a date and grouping by user and active date.
3. Build `event_table` to capture the earliest occurrence of each quickplay event type (e.g., level_start_quickplay) for each user during the period, storing their cohort date.
4. Join `event_table` with `dates_active_table` in `days_since_event_table` to calculate days_since_event between event_cohort_date and user_active_date.
5. Convert days_since_event to weeks in `weeks_retention` using CEIL(days/7), grouping by user and event type to track weeks_since_event.
6. Aggregate in `aggregated_weekly_retention_table` by summing active days and counting distinct users per event type and week interval.
7. Compute retention_rate in `RETENTION_INFO` by dividing retained_users by the maximum users in their cohort (week 0 baseline).
8. Filter results to weeks_since_event = 2 to isolate the two-week retention period and select event_cohort with retention_rate.
# [Sql]: WITH dates AS (    SELECT         DATE('2018-07-02') AS start_date,         DATE('2018-07-16') AS end_date ),dates_active_table AS (    SELECT         user_pseudo_id,         PARSE_DATE('%Y%m%d', event_date) AS user_active_date    FROM         `firebase-public-project.analytics_153293282.events_*`    WHERE         event_name = 'session_start'        AND PARSE_DATE('%Y%m%d', event_date) BETWEEN (SELECT start_date FROM dates) AND (SELECT end_date FROM dates)    GROUP BY         user_pseudo_id, user_active_date),event_table AS (    SELECT         user_pseudo_id,         event_name,         MIN(PARSE_DATE('%Y%m%d', event_date)) AS event_cohort_date    FROM         `firebase-public-project.analytics_153293282.events_*`    WHERE         event_name IN ('level_start_quickplay', 'level_end_quickplay', 'level_complete_quickplay',                       'level_fail_quickplay', 'level_reset_quickplay', 'level_retry_quickplay')        AND PARSE_DATE('%Y%m%d', event_date) BETWEEN (SELECT start_date FROM dates) AND (SELECT end_date FROM dates)    GROUP BY         user_pseudo_id, event_name),days_since_event_table AS (    SELECT         events.user_pseudo_id,         events.event_name AS event_cohort,         events.event_cohort_date,         days.user_active_date,         DATE_DIFF(days.user_active_date, events.event_cohort_date, DAY) AS days_since_event    FROM         event_table events    LEFT JOIN         dates_active_table days ON events.user_pseudo_id = days.user_pseudo_id    WHERE         events.event_cohort_date <= days.user_active_date),weeks_retention AS (    SELECT         event_cohort,         user_pseudo_id,         CAST(CASE WHEN days_since_event = 0 THEN 0 ELSE CEIL(days_since_event / 7) END AS INTEGER) AS weeks_since_event,         COUNT(DISTINCT days_since_event) AS days_active_since_event    FROM         days_since_event_table    GROUP BY         event_cohort, user_pseudo_id, weeks_since_event),aggregated_weekly_retention_table AS (    SELECT         event_cohort,         weeks_since_event,         SUM(days_active_since_event) AS weekly_days_active,         COUNT(DISTINCT user_pseudo_id) AS retained_users    FROM         weeks_retention    GROUP BY         event_cohort, weeks_since_event),RETENTION_INFO AS (    SELECT         event_cohort,         weeks_since_event,         weekly_days_active,         retained_users,         (retained_users / MAX(retained_users) OVER (PARTITION BY event_cohort)) AS retention_rate    FROM         aggregated_weekly_retention_table    ORDER BY         event_cohort, weeks_since_event)SELECT     event_cohort,     retention_rate FROM     RETENTION_INFO WHERE     weeks_since_event = 2;