# [Question]: Provide the daily weather data for Rochester from January 1 to March 31, 2019, including temperature (in Celsius), precipitation (in centimeters), and wind speed (in meters per second). For each variable, calculate the 8-day moving average (including the current day and the previous 7 days). Also, calculate the difference between the moving average on each day and the moving averages for the previous 1 to 8 days (i.e., lag1 to lag8). The result should include: The daily values for temperature, precipitation, and wind speed.The 8-day moving averages for each variable. The differences between the moving averages for each of the previous 1 to 8 days (e.g., the difference between today's moving average and the moving average from 1 day ago, from 2 days ago, and so on). Round all values to one decimal place. The data should be ordered by date, starting from January 9, 2019.
# [Schema links]: ["noaa_gsod.gsod*.year", "noaa_gsod.gsod*.mo", "noaa_gsod.gsod*.da", "noaa_gsod.gsod*.temp", "noaa_gsod.gsod*.prcp", "noaa_gsod.gsod*.wdsp", "noaa_gsod.gsod*.stn"]
# [Analysis]: Letâ€™s think step by step.
1. Identify the relevant columns from the schema: `year`, `mo`, `da`, `temp`, `prcp`, `wdsp`, and `stn` from the `noaa_gsod.gsod*` tables.
2. Filter data for the year 2019, months 1 to 3, and the station corresponding to Rochester using the `stations` table.
3. Convert temperature from Fahrenheit to Celsius, precipitation from inches to centimeters, and wind speed from knots to meters per second.
4. Create a CTE (`transrate`) to store the converted values and formatted `observation_date`.
5. Calculate 8-day moving averages for temperature, precipitation, and wind speed using `AVG() OVER (ORDER BY observation_date ROWS 7 PRECEDING)` in the `moving_avg` CTE.
6. Use `LAG()` functions in the `lag_moving_avg` CTE to capture the previous 1-8 moving averages for each variable.
7. Compute differences between consecutive lagged moving averages (e.g., `lag1 - lag2`, `lag2 - lag3`, etc.) for each variable.
8. Select all required fields: daily values, moving averages, and their differences, rounding to one decimal place.
9. Filter rows where the 8-day lag (lag8) is not null to ensure sufficient data for all lags, starting from January 9, 2019.
10. Order the final result by `observation_date`.
# [Sql]: WITH transrate AS (     SELECT         DATE(CAST(year AS INT64), CAST(mo AS INT64), CAST(da AS INT64)) AS observation_date         , ROUND((temp - 32.0) / 1.8, 1) AS temp_mean_c -- using Celsius instead of Fahrenheit         , ROUND(prcp * 2.54, 1) AS prcp_cm -- from inches to centimeters         , ROUND(CAST(wdsp AS FLOAT64) * 1.852 / 3.6, 1) AS wdsp_ms -- from knots to meters per second     FROM `bigquery-public-data.noaa_gsod.gsod*`     WHERE _TABLE_SUFFIX = "2019"         AND CAST(mo AS INT64) <= 3         AND stn in (SELECT usaf FROM `bigquery-public-data.noaa_gsod.stations` WHERE name = "ROCHESTER") ),  moving_avg AS (     SELECT         observation_date         , temp_mean_c         , prcp_cm         , wdsp_ms         , AVG(temp_mean_c) OVER (ORDER BY observation_date ROWS 7 PRECEDING) AS temp_moving_avg         , AVG(prcp_cm) OVER (ORDER BY observation_date ROWS 7 PRECEDING) AS prcp_moving_avg         , AVG(wdsp_ms) OVER (ORDER BY observation_date ROWS 7 PRECEDING) AS wdsp_moving_avg     FROM transrate ),  lag_moving_avg AS (     SELECT         observation_date         , temp_mean_c         , prcp_cm         , wdsp_ms         , LAG(temp_moving_avg, 1) OVER (ORDER BY observation_date) AS lag1_temp_moving_avg         , LAG(prcp_moving_avg, 1) OVER (ORDER BY observation_date) AS lag1_prcp_moving_avg         , LAG(wdsp_moving_avg, 1) OVER (ORDER BY observation_date) AS lag1_wdsp_moving_avg          , LAG(temp_moving_avg, 2) OVER (ORDER BY observation_date) AS lag2_temp_moving_avg         , LAG(prcp_moving_avg, 2) OVER (ORDER BY observation_date) AS lag2_prcp_moving_avg         , LAG(wdsp_moving_avg, 2) OVER (ORDER BY observation_date) AS lag2_wdsp_moving_avg          , LAG(temp_moving_avg, 3) OVER (ORDER BY observation_date) AS lag3_temp_moving_avg         , LAG(prcp_moving_avg, 3) OVER (ORDER BY observation_date) AS lag3_prcp_moving_avg         , LAG(wdsp_moving_avg, 3) OVER (ORDER BY observation_date) AS lag3_wdsp_moving_avg          , LAG(temp_moving_avg, 4) OVER (ORDER BY observation_date) AS lag4_temp_moving_avg         , LAG(prcp_moving_avg, 4) OVER (ORDER BY observation_date) AS lag4_prcp_moving_avg         , LAG(wdsp_moving_avg, 4) OVER (ORDER BY observation_date) AS lag4_wdsp_moving_avg          , LAG(temp_moving_avg, 5) OVER (ORDER BY observation_date) AS lag5_temp_moving_avg         , LAG(prcp_moving_avg, 5) OVER (ORDER BY observation_date) AS lag5_prcp_moving_avg         , LAG(wdsp_moving_avg, 5) OVER (ORDER BY observation_date) AS lag5_wdsp_moving_avg          , LAG(temp_moving_avg, 6) OVER (ORDER BY observation_date) AS lag6_temp_moving_avg         , LAG(prcp_moving_avg, 6) OVER (ORDER BY observation_date) AS lag6_prcp_moving_avg         , LAG(wdsp_moving_avg, 6) OVER (ORDER BY observation_date) AS lag6_wdsp_moving_avg          , LAG(temp_moving_avg, 7) OVER (ORDER BY observation_date) AS lag7_temp_moving_avg         , LAG(prcp_moving_avg, 7) OVER (ORDER BY observation_date) AS lag7_prcp_moving_avg         , LAG(wdsp_moving_avg, 7) OVER (ORDER BY observation_date) AS lag7_wdsp_moving_avg          , LAG(temp_moving_avg, 8) OVER (ORDER BY observation_date) AS lag8_temp_moving_avg         , LAG(prcp_moving_avg, 8) OVER (ORDER BY observation_date) AS lag8_prcp_moving_avg         , LAG(wdsp_moving_avg, 8) OVER (ORDER BY observation_date) AS lag8_wdsp_moving_avg     FROM moving_avg )  SELECT     observation_date     , temp_mean_c     , prcp_cm     , wdsp_ms      , ROUND(lag1_temp_moving_avg, 1) AS lag1_temp_moving_avg     , ROUND(lag1_prcp_moving_avg, 1) AS lag1_prcp_moving_avg     , ROUND(lag1_wdsp_moving_avg, 1) AS lag1_wdsp_moving_avg          , ROUND(lag1_temp_moving_avg - lag2_temp_moving_avg, 1) AS diff2_temp_moving_avg     , ROUND(lag1_prcp_moving_avg - lag2_prcp_moving_avg, 1) AS diff2_prcp_moving_avg     , ROUND(lag1_wdsp_moving_avg - lag2_wdsp_moving_avg, 1) AS diff2_wdsp_moving_avg     , ROUND(lag2_temp_moving_avg, 1) AS lag2_temp_moving_avg     , ROUND(lag2_prcp_moving_avg, 1) AS lag2_prcp_moving_avg     , ROUND(lag2_wdsp_moving_avg, 1) AS lag2_wdsp_moving_avg          , ROUND(lag2_temp_moving_avg - lag3_temp_moving_avg, 1) AS diff3_temp_moving_avg     , ROUND(lag2_prcp_moving_avg - lag3_prcp_moving_avg, 1) AS diff3_prcp_moving_avg     , ROUND(lag2_wdsp_moving_avg - lag3_wdsp_moving_avg, 1) AS diff3_wdsp_moving_avg     , ROUND(lag3_temp_moving_avg, 1) AS lag3_temp_moving_avg     , ROUND(lag3_prcp_moving_avg, 1) AS lag3_prcp_moving_avg     , ROUND(lag3_wdsp_moving_avg, 1) AS lag3_wdsp_moving_avg          , ROUND(lag3_temp_moving_avg - lag4_temp_moving_avg, 1) AS diff4_temp_moving_avg     , ROUND(lag3_prcp_moving_avg - lag4_prcp_moving_avg, 1) AS diff4_prcp_moving_avg     , ROUND(lag3_wdsp_moving_avg - lag4_wdsp_moving_avg, 1) AS diff4_wdsp_moving_avg     , ROUND(lag4_temp_moving_avg, 1) AS lag4_temp_moving_avg     , ROUND(lag4_prcp_moving_avg, 1) AS lag4_prcp_moving_avg     , ROUND(lag4_wdsp_moving_avg, 1) AS lag4_wdsp_moving_avg          , ROUND(lag4_temp_moving_avg - lag5_temp_moving_avg, 1) AS diff5_temp_moving_avg     , ROUND(lag4_prcp_moving_avg - lag5_prcp_moving_avg, 1) AS diff5_prcp_moving_avg     , ROUND(lag4_wdsp_moving_avg - lag5_wdsp_moving_avg, 1) AS diff5_wdsp_moving_avg     , ROUND(lag5_temp_moving_avg, 1) AS lag5_temp_moving_avg     , ROUND(lag5_prcp_moving_avg, 1) AS lag5_prcp_moving_avg     , ROUND(lag5_wdsp_moving_avg, 1) AS lag5_wdsp_moving_avg          , ROUND(lag5_temp_moving_avg - lag6_temp_moving_avg, 1) AS diff6_temp_moving_avg     , ROUND(lag5_prcp_moving_avg - lag6_prcp_moving_avg, 1) AS diff6_prcp_moving_avg     , ROUND(lag5_wdsp_moving_avg - lag6_wdsp_moving_avg, 1) AS diff6_wdsp_moving_avg     , ROUND(lag6_temp_moving_avg, 1) AS lag6_temp_moving_avg     , ROUND(lag6_prcp_moving_avg, 1) AS lag6_prcp_moving_avg     , ROUND(lag6_wdsp_moving_avg, 1) AS lag6_wdsp_moving_avg          , ROUND(lag6_temp_moving_avg - lag7_temp_moving_avg, 1) AS diff7_temp_moving_avg     , ROUND(lag6_prcp_moving_avg - lag7_prcp_moving_avg, 1) AS diff7_prcp_moving_avg     , ROUND(lag6_wdsp_moving_avg - lag7_wdsp_moving_avg, 1) AS diff7_wdsp_moving_avg     , ROUND(lag7_temp_moving_avg, 1) AS lag7_temp_moving_avg     , ROUND(lag7_prcp_moving_avg, 1) AS lag7_prcp_moving_avg     , ROUND(lag7_wdsp_moving_avg, 1) AS lag7_wdsp_moving_avg          , ROUND(lag7_temp_moving_avg - lag8_temp_moving_avg, 1) AS diff8_temp_moving_avg     , ROUND(lag7_prcp_moving_avg - lag8_prcp_moving_avg, 1) AS diff8_prcp_moving_avg     , ROUND(lag7_wdsp_moving_avg - lag8_wdsp_moving_avg, 1) AS diff8_wdsp_moving_avg     , ROUND(lag8_temp_moving_avg, 1) AS lag8_temp_moving_avg     , ROUND(lag8_prcp_moving_avg, 1) AS lag8_prcp_moving_avg     , ROUND(lag8_wdsp_moving_avg, 1) AS lag8_wdsp_moving_avg FROM lag_moving_avg WHERE   lag8_temp_moving_avg IS NOT NULL ORDER BY observation_date; -- all result rounded to 1 decimal place