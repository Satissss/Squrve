# [Question]: Please show information of the hurricane with the third longest total travel distance in the North Atlantic during 2020, including its travel coordinates, the cumulative travel distance at each point, and the maximum sustained wind speed at those times.
# [Schema links]: ["noaa_hurricanes.longitude", "noaa_hurricanes.latitude", "noaa_hurricanes.season", "noaa_hurricanes.basin", "noaa_hurricanes.name", "noaa_hurricanes.sid", "noaa_hurricanes.iso_time", "noaa_hurricanes.usa_wind"]
# [Analysis]: Letâ€™s think step by step.
1. Filter the `noaa_hurricanes` table for records where `season` is '2020', `basin` is 'NA', and `name` is not 'NOT NAMED'.
2. Convert longitude and latitude into a geographic point using `ST_GEOGPOINT` to facilitate distance calculations.
3. Calculate the distance between consecutive points for each hurricane's path using `LAG` and `ST_DISTANCE`, converting meters to kilometers.
4. Compute cumulative travel distance at each point and total travel distance per hurricane using window functions.
5. Rank hurricanes by their total travel distance in descending order using `DENSE_RANK()`.
6. Select records where the hurricane's rank is 3, including geometry (coordinates), cumulative distance, and maximum sustained wind speed.
7. Order the final results by cumulative_distance to reflect the progression of the hurricane's path.
# [Sql]: WITH hurricane_geometry AS (   SELECT     * EXCEPT (longitude, latitude),     ST_GEOGPOINT(longitude, latitude) AS geom,   FROM     `bigquery-public-data.noaa_hurricanes.hurricanes`   WHERE     season = '2020'     AND basin = 'NA'     AND name != 'NOT NAMED' ), dist_between_points AS (   SELECT     sid,     name,     season,     iso_time,     usa_wind,     geom,     ST_DISTANCE(geom, LAG(geom, 1) OVER (PARTITION BY sid ORDER BY iso_time ASC)) / 1000 AS dist   FROM     hurricane_geometry ), total_distances AS (   SELECT     sid,     name,     season,     iso_time,     usa_wind,     geom,     SUM(dist) OVER (PARTITION BY sid ORDER BY iso_time ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_distance,     SUM(dist) OVER (PARTITION BY sid) AS total_dist   FROM     dist_between_points ), ranked_hurricanes AS (   SELECT     *,     DENSE_RANK() OVER (ORDER BY total_dist DESC) AS dense_rank   FROM     total_distances )  SELECT   geom,cumulative_distance,usa_wind FROM   ranked_hurricanes WHERE   dense_rank = 3 ORDER BY cumulative_distance;