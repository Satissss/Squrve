# [Question]: Could you please help me get the weekly customer retention rate in September 2018 for new customers who first used our app (first_open event) within the first week starting from September 1st, 2018 (timezone in Shanghai)? The retention rates should cover the following weeks 1, 2, and 3 period after the initial use and display them in column format.
# [Schema links]: ["events_*.user_pseudo_id", "events_*.event_timestamp", "events_*.event_name"]
# [Analysis]: Letâ€™s think step by step.
1. Identify the relevant table `events_*` and columns `user_pseudo_id`, `event_timestamp`, `event_name` for tracking user activity and events.
2. Calculate the start timestamp for September 1st 2018 in Shanghai timezone using `UNIX_MICROS(TIMESTAMP("2018-09-01 00:00:00", "+8:00"))`.
3. Define one_week_micros as the number of microseconds in a week to standardize time intervals.
4. Filter events between September 1-30, 2018 using `_table_suffix` to limit data scope.
5. Create week_0_cohort by selecting users who triggered 'first_open' event within the first week (start_day to start_day + 1 week).
6. For weeks 1, 2, and 3, define each week's time range as start_day + (n*one_week_micros) to start_day + (n+1)*one_week_micros.
7. For each subsequent week (1, 2, 3), identify users active during those periods using their event_timestamp.
8. Calculate retained users in each week by joining week_n_users with week_0_cohort on user_pseudo_id to ensure they were part of the initial cohort.
9. Compute retention rates by dividing retained user counts by the initial cohort size (week_0_cohort) for each week.
10. Format the final output as columns showing week_1_pct, week_2_pct, and week_3_pct using division and aliasing.
# [Sql]: WITH analytics_data AS (   SELECT user_pseudo_id, event_timestamp, event_name,      UNIX_MICROS(TIMESTAMP("2018-09-01 00:00:00", "+8:00")) AS start_day,     3600*1000*1000*24*7 AS one_week_micros   FROM `firebase-public-project.analytics_153293282.events_*`   WHERE _table_suffix BETWEEN '20180901' AND '20180930' )  SELECT  week_1_cohort / week_0_cohort AS week_1_pct,  week_2_cohort / week_0_cohort AS week_2_pct,  week_3_cohort / week_0_cohort AS week_3_pct FROM (   WITH week_3_users AS (     SELECT DISTINCT user_pseudo_id     FROM analytics_data     WHERE event_timestamp BETWEEN start_day+(3*one_week_micros) AND start_day+(4*one_week_micros)   ),   week_2_users AS (     SELECT DISTINCT user_pseudo_id     FROM analytics_data     WHERE event_timestamp BETWEEN start_day+(2*one_week_micros) AND start_day+(3*one_week_micros)   ),   week_1_users AS (     SELECT DISTINCT user_pseudo_id     FROM analytics_data     WHERE event_timestamp BETWEEN start_day+(1*one_week_micros) AND start_day+(2*one_week_micros)   ),    week_0_users AS (     SELECT DISTINCT user_pseudo_id     FROM analytics_data     WHERE event_name = 'first_open'       AND event_timestamp BETWEEN start_day AND start_day+(1*one_week_micros)   )   SELECT      (SELECT count(*)       FROM week_0_users) AS week_0_cohort,     (SELECT count(*)       FROM week_1_users       JOIN week_0_users USING (user_pseudo_id)) AS week_1_cohort,     (SELECT count(*)       FROM week_2_users       JOIN week_0_users USING (user_pseudo_id)) AS week_2_cohort,     (SELECT count(*)       FROM week_3_users       JOIN week_0_users USING (user_pseudo_id)) AS week_3_cohort )